# yaml-language-server: $schema=https://json.schemastore.org/taskfile.json
---
version: "3"

dotenv: [.env]

vars:
  LAMBDA_BUCKET: "adamatti-sa"
  BUILD_TAG: $(cat .cache/build_tag)

tasks:
  default:
    desc: Show help
    aliases: [h]
    silent: true
    cmds:
      - task -l --sort alphanumeric
  
  clean:
    desc: Clean the project
    cmds:
      - rm -rf build
      - rm -rf .cache && mkdir -p .cache

  clean-hard:
    desc: Clean the project hard
    cmds:
      - task: clean
      - rm -rf node_modules
      - rm -rf .task
  
  install:
    desc: Install dependencies
    aliases: [i]
    run: once
    preconditions:
      - test -f package.json
    status:
      - test -d node_modules
    sources:
      - pnpm-lock.yaml
      - package.json
      - pnpm-workspace.yaml
    cmds:      
      - pnpm install
      - pnpm approve-builds

  build:
    desc: Build the project
    cmds:
      - task: check
      - pnpm --silent run build
      - cd build;zip build.zip *.js *.js.map

  type-check:
    desc: Type check the project
    aliases: [tc]
    cmds:
      - task: install
      - pnpm --silent run type-check

  lint:
    desc: Lint the project
    cmds:
      - task: install
      - pnpm --silent run lint

  lint:fix:
    desc: Lint the project and fix issues
    cmds:
      - task: install
      - pnpm --silent run lint --unsafe

  check:
    desc: Check the project
    cmds:
      - task: install
      - task: type-check
      - task: lint

  generate-build-tag:
    desc: Generate a build tag
    silent: true
    internal: true
    run: once
    cmds:
      - mkdir -p .cache
      - echo $(date +%Y%m%d%H%M%S) > .cache/build_tag
      - "echo \"Build tag: $(cat .cache/build_tag)\""

  deploy:
    desc: Deploy the project
    cmds:
      - task: clean
      - task: build
      - task: generate-build-tag
      - aws s3 cp ./build/build.zip s3://{{ .LAMBDA_BUCKET }}/build/lambda-{{ .BUILD_TAG }}.zip
      - task: tf:apply

  tf:plan:
    desc: Terraform plan
    aliases: [plan, p]
    preconditions:
      - test -f .cache/build_tag
    cmds:
      - task: tf:lint
      - >-
        cd infra;
        TF_VAR_build_tag=$(cat ../.cache/build_tag)
        TF_VAR_env_vars="{}"
        tofu plan

  tf:apply:  
    desc: Terraform plan
    aliases: [apply, a]
    preconditions:
      - test -f .cache/build_tag
    cmds:
      - task: tf:lint
      - >-
        cd infra;
        TF_VAR_build_tag=$(cat ../.cache/build_tag)
        TF_VAR_env_vars="{}"
        tofu apply -input=false -auto-approve

  tf:output:  
    desc: Terraform output
    aliases: [output, out, o]
    preconditions:
      - test -f .cache/build_tag
    cmds:
      - task: tf:lint
      - >-
        cd infra;
        TF_VAR_build_tag=$(cat ../.cache/build_tag)
        TF_VAR_env_vars="{}"
        tofu output

  tf:lint:
    run: once
    cmds:
      - cd infra;tflint --disable-rule=terraform_required_version --recursive -f compact

  aws:logs:
    desc: Get logs from AWS
    aliases: [logs]
    cmds:
      # FIXME remove hardcoded name
      - aws logs tail --since 1h --follow /aws/lambda/learn-cognito-lambda